* Base
#+begin_src elisp
;; only errors
(setq native-compilation-async-report-warnings-errors 'errors)
(setq warning-minimum-level :error)

;; no junk files
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq auto-save-default nil)

;; Add MELPA repository
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")) 
(add-to-list 'package-archives
             '("elpa" . "https://elpa.gnu.org/packages/"))
(package-initialize)

;; Install 'use-package' if not already installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Initialize 'use-package'
(eval-when-compile
  (require 'use-package))
#+end_src
* Setup
** Packages
#+begin_src elisp
;; Setup Path
(use-package exec-path-from-shell
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

;; Install and configure Evil mode
(use-package evil
  :ensure t
  :init
  (setq evil-undo-system 'undo-redo)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

;; collection
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

;; vterm
(use-package vterm
  :ensure t
  :init
  (setq vterm-kill-buffer-on-exit t)
  :hook (vterm-mode . vterm-cursor-hook)
  :config
  (defun vterm-cursor-hook ()
    (setq-local evil-insert-state-cursor 'box)))

;; set the theme
(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox t))

;; which key
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

;; general
(use-package general 
  :ensure t
  :config
  (general-evil-setup t))

;; magit
(use-package magit
  :ensure t)

;; Helm
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files))

;; completion
(use-package corfu
  :ensure t
  :init
  (setq tab-always-indent 'complete)
  (global-corfu-mode))

;; modeline
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  (setq doom-modeline-icon nil))
#+end_src
** Theming
#+begin_src elisp
;; remove defaults
(setq inhibit-startup-screen t)
;; hiding toolbar
(tool-bar-mode -1)
;; hiding menubar
(menu-bar-mode -1)
;; hiding scrollbar
(scroll-bar-mode -1)
;; set font
(set-face-attribute 'default nil :font "Blex Mono Nerd Font-22")
;; line numbers
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

;; Treesitter
(require 'treesit)
#+end_src
** Keymaps
#+begin_src elisp
(general-create-definer
  my-leader-def
  :prefix "SPC")

;; ** Global Keybindings
(my-leader-def
  :keymaps 'normal
  ;; vertico 
  "." '(helm-find-files :which-key "find-files")
  ;; buffer management
  "b s" '(switch-to-buffer :which-key "switch to buffer")
  "b k" '(kill-buffer-and-window :which-key "kill buffer and window")
  "b K" '(kill-some-buffers :which-key "kill some buffers")
  "b t" '(tear-off-window :which-key "tear off window")
  ;; compiling
  "c c" '(compile :which-key "compile")
  ;; line wrapping
  "w" '(toggle-truncate-lines :which-key "toggle truncate lines")
  ;; terminal
  "v" '(vterm-other-window :which-key "vterm other window"))
#+end_src
** Languages
*** IDE
#+begin_src elisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook ((lsp-mode . lsp-enable-which-key-integration))
  :config
  (setq lsp-prefer-capf t)
  :commands lsp)

;; extensions
(use-package lsp-ui
  :ensure t
  :init
  (setq lsp-ui-doc-enable t)
  :commands (lsp-ui-mode lsp-ui-doc-hide)
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)
  (general-nmap
    :keymap 'lsp-ui-mode-map
    "gd" '(lsp-ui-peek-find-definitions :which-key "peek definitions")
    "gr" '(lsp-ui-peek-find-references :which-key "peek references")
    "gc" '(helm-lsp-code-actions :which-key "code actions")
    "TAB" '(lsp-ui-doc-focus-frame :which-key "lsp ui doc focus")
    "K" '(lsp-ui-doc-glance :which-key "lsp ui doc show")))

(use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src
*** Rust
#+begin_src elisp
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t)
  :ensure t)
#+end_src
*** Python
#+begin_src elisp
(setq major-mode-remap-alist
    '((python-mode . python-ts-mode)))
#+end_src
** Splash
#+begin_src elisp
(defun my-emacs-splash-buffer ()
  (let* ((buf (get-buffer-create "*Emacs Splash*"))
         (ascii-art (concat "███████╗███╗   ███╗ █████╗  ██████╗███████╗\n"
                            "██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝\n"
                            "█████╗  ██╔████╔██║███████║██║     ███████╗\n"
                            "██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║\n"
                            "███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║\n"
                            "╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝\n"))
         (window-width (window-width))
         (window-height (window-height))
         (ascii-width (length (car (split-string ascii-art "\n"))))
         (message-width (length "Long Live Emacs!"))
         (config-width (length "Open Config..."))
         (find-width (length "Find Files..."))
         (padding (make-string (/ (- window-width ascii-width) 2) ?\s))
         (message-padding (make-string (/ (- window-width message-width) 2) ?\s))
         (config-padding (make-string (/ (- window-width config-width) 2) ?\s))
         (find-padding (make-string (/ (- window-width find-width) 2) ?\s))
         (vertical-padding (/ window-height 4)))
    (with-current-buffer buf
      (erase-buffer)
      ;; Insert vertical padding from the top
      (dotimes (_ vertical-padding) (insert "\n"))
      ;; Insert ASCII art and other text
      (dolist (line (split-string ascii-art "\n"))
        (insert padding line "\n"))
      (insert "\n")
      (insert find-padding)
      (insert-button "Find Files..."
                     'action (lambda (_) (call-interactively 'helm-find-files))
                     'face '(:underline t :foreground "cyan"))
      (insert "\n")
      (insert config-padding)
      (insert-button "Open Config..."
                     'action (lambda (_) (find-file "~/.emacs.d/config.org"))
                     'face '(:underline t :foreground "cyan"))
      (dotimes (_ 9) (insert "\n"))
      (insert message-padding "Long Live Lisp!\n")
      (setq buffer-read-only t)
      (search-backward "Open")
      )
    buf))
(setq initial-buffer-choice 'my-emacs-splash-buffer)
#+end_src
* Org
#+begin_src elisp
;; src blocks
(require 'color)
(add-hook 'org-mode-hook 'org-indent-mode)
;; line wrapping
(add-hook 'org-mode-hook #'visual-line-mode)
;; org shortcuts
(require 'org-tempo)
;; setting up org src blocks
(setq
 org-confirm-babel-evaluate nil
 org-src-preserve-indentation nil
 org-edit-src-content-indentation 0)
#+end_src
